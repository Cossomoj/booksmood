#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∫–Ω–∏–≥
"""

import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, '/app')

from sqlalchemy.orm import Session
from app.database import SessionLocal, engine
from app.models import Category, Book, Admin, Base
from app.utils import ensure_directory_exists
import requests
import urllib.request
from datetime import datetime

def create_demo_categories(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("üìö –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–∞—Ç–µ–≥–æ—Ä–∏–∏...")
    
    categories_data = [
        {"name": "–ö–ª–∞—Å—Å–∏–∫–∞", "emoji": "üìö"},
        {"name": "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "emoji": "üöÄ"},
        {"name": "–î–µ—Ç–µ–∫—Ç–∏–≤—ã", "emoji": "üïµÔ∏è"},
        {"name": "–†–æ–º–∞–Ω—ã", "emoji": "‚ù§Ô∏è"},
        {"name": "–ë–∏–∑–Ω–µ—Å", "emoji": "üíº"},
        {"name": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "emoji": "üß†"},
        {"name": "–ò—Å—Ç–æ—Ä–∏—è", "emoji": "üèõÔ∏è"},
        {"name": "–ë–∏–æ–≥—Ä–∞—Ñ–∏–∏", "emoji": "üë§"},
        {"name": "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ", "emoji": "üåü"},
        {"name": "–§–∏–ª–æ—Å–æ—Ñ–∏—è", "emoji": "ü§î"}
    ]
    
    created_count = 0
    for cat_data in categories_data:
        existing = db.query(Category).filter(Category.name == cat_data["name"]).first()
        if not existing:
            category = Category(**cat_data)
            db.add(category)
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {cat_data['emoji']} {cat_data['name']}")
        else:
            print(f"  ‚ö†Ô∏è  –ö–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {cat_data['emoji']} {cat_data['name']}")
    
    db.commit()
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
    return created_count

def download_demo_audio():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–µ–º–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤"""
    print("üéµ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–µ–º–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã...")
    
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    audio_dir = Path("/app/app/static/uploads/audio")
    covers_dir = Path("/app/app/static/uploads/covers")
    ensure_directory_exists(str(audio_dir))
    ensure_directory_exists(str(covers_dir))
    
    # –î–µ–º–æ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã (–∫–æ—Ä–æ—Ç–∫–∏–µ mp3 –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    demo_files = {
        "demo1.mp3": {
            "url": "https://www.soundjay.com/misc/sounds/bell-ringing-05.wav",
            "title": "–ö–ª–∞—Å—Å–∏–∫–∞ - –ö–æ–ª–æ–∫–æ–ª–∞",
            "duration": 10
        },
        "demo2.mp3": {
            "url": "https://www.soundjay.com/misc/sounds/click-01.wav", 
            "title": "–î–µ—Ç–µ–∫—Ç–∏–≤ - –¢–∞–π–Ω–∞",
            "duration": 15
        }
    }
    
    # –î–ª—è –¥–µ–º–æ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Å—Ç—ã–µ —Ñ–∞–π–ª—ã
    demo_audio_content = b'\x00' * 1024  # –ü—Ä–æ—Å—Ç–æ–π –±–∏–Ω–∞—Ä–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –¥–ª—è –¥–µ–º–æ
    
    demo_files_created = []
    for filename, info in demo_files.items():
        file_path = audio_dir / filename
        if not file_path.exists():
            with open(file_path, 'wb') as f:
                f.write(demo_audio_content)
            demo_files_created.append({
                "path": str(file_path),
                "url": f"/static/uploads/audio/{filename}",
                "title": info["title"],
                "duration": info["duration"]
            })
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω –¥–µ–º–æ-—Ñ–∞–π–ª: {filename}")
    
    return demo_files_created

def create_demo_books(db: Session):
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-–∫–Ω–∏–≥"""
    print("üìñ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∫–Ω–∏–≥–∏...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    categories = {cat.name: cat for cat in db.query(Category).all()}
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º
    admin = db.query(Admin).first()
    if not admin:
        print("‚ö†Ô∏è  –ê–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–∞–¥–º–∏–Ω–∞...")
        from passlib.context import CryptContext
        pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
        
        admin = Admin(
            username="demo_admin",
            email="demo@booksmood.ru",
            password_hash=pwd_context.hash("demo123"),
            is_active=True
        )
        db.add(admin)
        db.commit()
        db.refresh(admin)
    
    # –î–µ–º–æ-–∫–Ω–∏–≥–∏
    demo_books = [
        {
            "title": "–í–æ–π–Ω–∞ –∏ –º–∏—Ä",
            "author": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π",
            "description": "–í–µ–ª–∏–∫–∏–π —Ä–æ–º–∞–Ω –æ –∂–∏–∑–Ω–∏ —Ä—É—Å—Å–∫–æ–≥–æ –¥–≤–æ—Ä—è–Ω—Å—Ç–≤–∞ –≤ —ç–ø–æ—Ö—É –≤–æ–π–Ω —Å –ù–∞–ø–æ–ª–µ–æ–Ω–æ–º.",
            "category": "–ö–ª–∞—Å—Å–∏–∫–∞",
            "duration_seconds": 144000,  # 40 —á–∞—Å–æ–≤
            "is_free": True
        },
        {
            "title": "–ü—Ä–µ—Å—Ç—É–ø–ª–µ–Ω–∏–µ –∏ –Ω–∞–∫–∞–∑–∞–Ω–∏–µ", 
            "author": "–§–µ–¥–æ—Ä –î–æ—Å—Ç–æ–µ–≤—Å–∫–∏–π",
            "description": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ä–æ–º–∞–Ω –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –†–∞—Å–∫–æ–ª—å–Ω–∏–∫–æ–≤–µ –∏ –µ–≥–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –±–æ—Ä—å–±–µ.",
            "category": "–ö–ª–∞—Å—Å–∏–∫–∞",
            "duration_seconds": 72000,  # 20 —á–∞—Å–æ–≤
            "is_free": True
        },
        {
            "title": "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä –∏ —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏–π –∫–∞–º–µ–Ω—å",
            "author": "–î–∂. –ö. –†–æ—É–ª–∏–Ω–≥",
            "description": "–ü–µ—Ä–≤–∞—è –∫–Ω–∏–≥–∞ –æ —é–Ω–æ–º –≤–æ–ª—à–µ–±–Ω–∏–∫–µ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–µ.",
            "category": "–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", 
            "duration_seconds": 28800,  # 8 —á–∞—Å–æ–≤
            "is_free": False
        },
        {
            "title": "–®–µ—Ä–ª–æ–∫ –•–æ–ª–º—Å: –≠—Ç—é–¥ –≤ –±–∞–≥—Ä–æ–≤—ã—Ö —Ç–æ–Ω–∞—Ö",
            "author": "–ê—Ä—Ç—É—Ä –ö–æ–Ω–∞–Ω –î–æ–π–ª—å",
            "description": "–ü–µ—Ä–≤–æ–µ –ø–æ—è–≤–ª–µ–Ω–∏–µ –∑–Ω–∞–º–µ–Ω–∏—Ç–æ–≥–æ –¥–µ—Ç–µ–∫—Ç–∏–≤–∞ –®–µ—Ä–ª–æ–∫–∞ –•–æ–ª–º—Å–∞.",
            "category": "–î–µ—Ç–µ–∫—Ç–∏–≤—ã",
            "duration_seconds": 18000,  # 5 —á–∞—Å–æ–≤
            "is_free": True
        },
        {
            "title": "–ê—Ç–æ–º–Ω—ã–µ –ø—Ä–∏–≤—ã—á–∫–∏",
            "author": "–î–∂–µ–π–º—Å –ö–ª–∏—Ä",
            "description": "–ö–∞–∫ –ø—Ä–∏–æ–±—Ä–µ—Ç–∞—Ç—å —Ö–æ—Ä–æ—à–∏–µ –ø—Ä–∏–≤—ã—á–∫–∏ –∏ –∏–∑–±–∞–≤–ª—è—Ç—å—Å—è –æ—Ç –ø–ª–æ—Ö–∏—Ö.",
            "category": "–°–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ",
            "duration_seconds": 36000,  # 10 —á–∞—Å–æ–≤
            "is_free": False
        },
        {
            "title": "–î—É–º–∞–π –∏ –±–æ–≥–∞—Ç–µ–π",
            "author": "–ù–∞–ø–æ–ª–µ–æ–Ω –•–∏–ª–ª", 
            "description": "–ö–ª–∞—Å—Å–∏–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é –∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—é —É—Å–ø–µ—Ö–∞.",
            "category": "–ë–∏–∑–Ω–µ—Å",
            "duration_seconds": 32400,  # 9 —á–∞—Å–æ–≤
            "is_free": True
        },
        {
            "title": "–ì–æ—Ä–¥–æ—Å—Ç—å –∏ –ø—Ä–µ–¥—É–±–µ–∂–¥–µ–Ω–∏–µ",
            "author": "–î–∂–µ–π–Ω –û—Å—Ç–µ–Ω",
            "description": "–†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è –≠–ª–∏–∑–∞–±–µ—Ç –ë–µ–Ω–Ω–µ—Ç –∏ –º–∏—Å—Ç–µ—Ä–∞ –î–∞—Ä—Å–∏.",
            "category": "–†–æ–º–∞–Ω—ã",
            "duration_seconds": 43200,  # 12 —á–∞—Å–æ–≤
            "is_free": True
        },
        {
            "title": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è –≤–ª–∏—è–Ω–∏—è",
            "author": "–†–æ–±–µ—Ä—Ç –ß–∞–ª–¥–∏–Ω–∏",
            "description": "–ö–∞–∫ –ø–æ–Ω–∏–º–∞—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–∑–¥–µ–π—Å—Ç–≤–∏—è.",
            "category": "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è",
            "duration_seconds": 27000,  # 7.5 —á–∞—Å–æ–≤
            "is_free": False
        }
    ]
    
    created_count = 0
    for book_data in demo_books:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –∫–Ω–∏–≥–∞
        existing = db.query(Book).filter(
            Book.title == book_data["title"],
            Book.author == book_data["author"]
        ).first()
        
        if not existing:
            category = categories.get(book_data["category"])
            
            book = Book(
                title=book_data["title"],
                author=book_data["author"],
                description=book_data["description"],
                duration_seconds=book_data["duration_seconds"],
                category_id=category.id if category else None,
                is_free=book_data["is_free"],
                added_by_admin_id=admin.id,
                # –î–ª—è –¥–µ–º–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –∞—É–¥–∏–æ—Ñ–∞–π–ª—ã
                audio_file_url=None,
                cover_url=None,
                rating=round(4.0 + (created_count * 0.2), 1),  # –†–µ–π—Ç–∏–Ω–≥–∏ –æ—Ç 4.0 –¥–æ 5.6
                plays_count=created_count * 15  # –†–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–π
            )
            
            db.add(book)
            created_count += 1
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–Ω–∏–≥–∞: {book.title} - {book.author}")
        else:
            print(f"  ‚ö†Ô∏è  –ö–Ω–∏–≥–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {book_data['title']}")
    
    db.commit()
    print(f"üìä –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∫–Ω–∏–≥")
    return created_count

def update_categories_count(db: Session):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–≤ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö"""
    print("üî¢ –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏ –∫–Ω–∏–≥ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö...")
    
    categories = db.query(Category).all()
    for category in categories:
        books_count = db.query(Book).filter(
            Book.category_id == category.id,
            Book.is_active == True
        ).count()
        category.books_count = books_count
        print(f"  üìö {category.emoji} {category.name}: {books_count} –∫–Ω–∏–≥")
    
    db.commit()

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö –¥–ª—è BooksMood")
    print("=" * 50)
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é –ë–î
        db = SessionLocal()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        Base.metadata.create_all(bind=engine)
        
        # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ
        categories_created = create_demo_categories(db)
        books_created = create_demo_books(db)
        update_categories_count(db)
        
        print("\n" + "=" * 50)
        print("‚úÖ –î–µ–º–æ-–¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print(f"üìö –ö–∞—Ç–µ–≥–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω–æ: {categories_created}")
        print(f"üìñ –ö–Ω–∏–≥ —Å–æ–∑–¥–∞–Ω–æ: {books_created}")
        print("üéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ-–¥–∞–Ω–Ω—ã—Ö: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    finally:
        db.close()
    
    return 0

if __name__ == "__main__":
    sys.exit(main()) 