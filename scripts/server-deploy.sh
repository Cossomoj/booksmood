#!/bin/bash

# BooksMood Server Deployment Script
# –î–ª—è –∑–∞–ø—É—Å–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ user1@213.171.25.85

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
SERVER_USER="user1"
SERVER_HOST="213.171.25.85"
SSH_KEY="~/.ssh/id_ed25519"
REPO_URL="git@github.com:Cossomoj/booksmood.git"
DEPLOY_DIR="/opt/booksmood"
PROJECT_NAME="booksmood"

echo "üöÄ BooksMood Server Deployment"
echo "==============================="
echo "üåê –°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_HOST"
echo "üìÅ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: $DEPLOY_DIR"
echo "üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $REPO_URL"
echo ""

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
run_on_server() {
    ssh -i "$SSH_KEY" "$SERVER_USER@$SERVER_HOST" "$1"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
copy_to_server() {
    scp -i "$SSH_KEY" "$1" "$SERVER_USER@$SERVER_HOST:$2"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
check_server() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    if ! ssh -i "$SSH_KEY" -o ConnectTimeout=10 "$SERVER_USER@$SERVER_HOST" "echo '–°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω'" > /dev/null 2>&1; then
        echo "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É $SERVER_HOST"
        echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:"
        echo "  - SSH –∫–ª—é—á: $SSH_KEY"
        echo "  - –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"
        echo "  - –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞"
        exit 1
    fi
    
    echo "‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω"
}

# –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
prepare_server() {
    echo "üìã –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
    
    run_on_server "
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞–∫–µ—Ç–æ–≤
        sudo apt update -qq
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v docker &> /dev/null; then
            echo 'üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...'
            curl -fsSL https://get.docker.com -o get-docker.sh
            sudo sh get-docker.sh
            sudo usermod -aG docker $USER
            rm get-docker.sh
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v docker-compose &> /dev/null; then
            echo 'üîß –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...'
            sudo curl -L \"https://github.com/docker/compose/releases/download/v2.20.0/docker-compose-\$(uname -s)-\$(uname -m)\" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
        fi
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git –µ—Å–ª–∏ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if ! command -v git &> /dev/null; then
            echo 'üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Git...'
            sudo apt install -y git
        fi
        
        # –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        sudo mkdir -p $DEPLOY_DIR
        sudo chown $USER:$USER $DEPLOY_DIR
        
        echo '‚úÖ –°–µ—Ä–≤–µ—Ä –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω'
    "
}

# –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è
update_repository() {
    echo "üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è..."
    
    run_on_server "
        cd $DEPLOY_DIR
        
        # –ï—Å–ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º
        if [ -d '.git' ]; then
            echo 'üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
            git fetch origin
            git reset --hard origin/main
            git pull origin main
        else
            echo 'üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è...'
            git clone $REPO_URL .
        fi
        
        echo '‚úÖ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω'
    "
}

# –°–æ–∑–¥–∞–Ω–∏–µ production .env —Ñ–∞–π–ª–∞
create_env_file() {
    echo "üìù –°–æ–∑–¥–∞–Ω–∏–µ production .env —Ñ–∞–π–ª–∞..."
    
    run_on_server "
        cd $DEPLOY_DIR
        
        cat > .env.prod << 'EOL'
# Production Environment
NODE_ENV=production

# Database (PostgreSQL)
POSTGRES_DB=booksmood
POSTGRES_USER=booksmood
POSTGRES_PASSWORD=\${POSTGRES_PASSWORD:-$(openssl rand -base64 32)}
DATABASE_URL=postgresql://booksmood:\${POSTGRES_PASSWORD}@postgres:5432/booksmood

# Redis Cache
REDIS_PASSWORD=\${REDIS_PASSWORD:-$(openssl rand -base64 32)}
REDIS_URL=redis://:\${REDIS_PASSWORD}@redis:6379

# JWT Secret
JWT_SECRET=\${JWT_SECRET:-$(openssl rand -base64 48)}

# Telegram (–û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ó–ê–ü–û–õ–ù–ò–¢–¨!)
TELEGRAM_BOT_TOKEN=YOUR_BOT_TOKEN_FROM_BOTFATHER
TELEGRAM_BOT_USERNAME=your_bot_username

# S3 Storage (–¥–ª—è production —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è AWS S3)
S3_ENDPOINT=\${S3_ENDPOINT:-http://minio:9000}
S3_ACCESS_KEY=\${S3_ACCESS_KEY:-minioadmin}
S3_SECRET_KEY=\${S3_SECRET_KEY:-$(openssl rand -base64 32)}
S3_BUCKET=\${S3_BUCKET:-booksmood-audio}
S3_REGION=\${S3_REGION:-us-east-1}

# API URLs
FRONTEND_API_URL=https://$SERVER_HOST:3001
ADMIN_API_URL=https://$SERVER_HOST:3001

# Security
CORS_ORIGIN=https://$SERVER_HOST:3000
RATE_LIMIT_WINDOW=3600000
RATE_LIMIT_MAX=1000

# Monitoring
SENTRY_DSN=
LOG_LEVEL=warn
EOL
        
        echo '‚úÖ .env.prod —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω'
        echo '‚ö†Ô∏è  –í–ê–ñ–ù–û: –ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å TELEGRAM_BOT_TOKEN!'
    "
}

# –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
deploy_application() {
    echo "üîß –°–±–æ—Ä–∫–∞ –∏ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    run_on_server "
        cd $DEPLOY_DIR
        
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
        docker-compose -f docker-compose.prod.yml down || true
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã –¥–ª—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏
        docker-compose -f docker-compose.prod.yml build --no-cache
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å—ã
        docker-compose -f docker-compose.prod.yml up -d
        
        # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        echo '‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...'
        sleep 10
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
        echo 'üìä –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...'
        docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy || true
        
        echo '‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ'
    "
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
check_deployment() {
    echo "üè• –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    run_on_server "
        cd $DEPLOY_DIR
        
        echo 'üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:'
        docker-compose -f docker-compose.prod.yml ps
        
        echo ''
        echo 'üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ URL:'
        echo '  Frontend: http://$SERVER_HOST:3000'
        echo '  Admin Panel: http://$SERVER_HOST:3002'  
        echo '  Backend API: http://$SERVER_HOST:3001'
        echo '  MinIO Console: http://$SERVER_HOST:9001'
        
        echo ''
        echo 'üîç Health Check API:'
        if curl -f -s http://localhost:3001/health > /dev/null 2>&1; then
            echo '  ‚úÖ Backend API: OK'
        else
            echo '  ‚ùå Backend API: FAILED'
        fi
    "
}

# –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏
show_logs() {
    echo "üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:"
    run_on_server "
        cd $DEPLOY_DIR
        docker-compose -f docker-compose.prod.yml logs --tail=50
    "
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-deploy}" in
        "check")
            check_server
            ;;
        "prepare")
            check_server
            prepare_server
            ;;
        "update")
            check_server
            update_repository
            ;;
        "deploy")
            check_server
            prepare_server
            update_repository
            create_env_file
            deploy_application
            check_deployment
            echo ""
            echo "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
            echo ""
            echo "üìù –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:"
            echo "1. –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ —Å–µ—Ä–≤–µ—Ä—É: ssh -i $SSH_KEY $SERVER_USER@$SERVER_HOST"
            echo "2. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ —Ñ–∞–π–ª: nano $DEPLOY_DIR/.env.prod"
            echo "3. –î–æ–±–∞–≤—å—Ç–µ –≤–∞—à TELEGRAM_BOT_TOKEN"
            echo "4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: cd $DEPLOY_DIR && docker-compose -f docker-compose.prod.yml restart"
            ;;
        "status")
            check_server
            check_deployment
            ;;
        "logs")
            check_server
            show_logs
            ;;
        "restart")
            check_server
            run_on_server "cd $DEPLOY_DIR && docker-compose -f docker-compose.prod.yml restart"
            check_deployment
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [check|prepare|update|deploy|status|logs|restart]"
            echo ""
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  check   - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"
            echo "  prepare - –ü–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä (—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Docker, etc)"
            echo "  update  - –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–¥ –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è"
            echo "  deploy  - –ü–æ–ª–Ω–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)"
            echo "  status  - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
            echo "  logs    - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
            echo "  restart - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
            exit 1
            ;;
    esac
}

main "$@" 