#!/bin/bash

# BooksMood - –°–∫—Ä–∏–ø—Ç –ø–æ–ª–Ω–æ–π –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ –æ—á–∏—Å—Ç–∫–∏
# –£–¥–∞–ª—è–µ—Ç –ø—Ä–æ–µ–∫—Ç, –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã, –¥–∞–Ω–Ω—ã–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
PROJECT_DIR="/opt/booksmood"
PROJECT_NAME="booksmood"
SERVICE_NAME="booksmood"

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

echo -e "${RED}üóëÔ∏è  BooksMood - –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞${NC}"
echo -e "${RED}===================================${NC}"
echo ""

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date '+%H:%M:%S')] $1${NC}"
}

warn() {
    echo -e "${YELLOW}[$(date '+%H:%M:%S')] ‚ö†Ô∏è  $1${NC}"
}

error() {
    echo -e "${RED}[$(date '+%H:%M:%S')] ‚ùå $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ sudo
check_sudo() {
    if [ "$EUID" -ne 0 ]; then
        log "–ó–∞–ø—É—Å–∫ —Å –ø—Ä–∞–≤–∞–º–∏ sudo..."
        exec sudo "$0" "$@"
    fi
}

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è
confirm_removal() {
    echo -e "${YELLOW}‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï! –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç:${NC}"
    echo "   ‚Ä¢ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã Docker –ø—Ä–æ–µ–∫—Ç–∞ BooksMood"
    echo "   ‚Ä¢ –í—Å–µ –æ–±—Ä–∞–∑—ã Docker –ø—Ä–æ–µ–∫—Ç–∞"
    echo "   ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ —Ñ–∞–π–ª—ã"
    echo "   ‚Ä¢ –ü–∞–ø–∫—É –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
    echo "   ‚Ä¢ Systemd —Å–ª—É–∂–±—É"
    echo "   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã"
    echo ""
    
    if [[ "${FORCE:-}" == "true" ]]; then
        log "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ"
        return
    fi
    
    read -p "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " -r
    if [[ ! $REPLY =~ ^[Yy][Ee][Ss]$ ]]; then
        echo "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞"
        exit 0
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–ª—É–∂–±—ã
stop_systemd_service() {
    if systemctl is-enabled "$SERVICE_NAME.service" &>/dev/null; then
        log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ systemd —Å–ª—É–∂–±—ã..."
        systemctl stop "$SERVICE_NAME.service" || true
        systemctl disable "$SERVICE_NAME.service" || true
        
        if [ -f "/etc/systemd/system/$SERVICE_NAME.service" ]; then
            rm -f "/etc/systemd/system/$SERVICE_NAME.service"
            systemctl daemon-reload
            log "Systemd —Å–ª—É–∂–±–∞ —É–¥–∞–ª–µ–Ω–∞"
        fi
    else
        log "Systemd —Å–ª—É–∂–±–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ —É–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if [ -d "$PROJECT_DIR" ]; then
        cd "$PROJECT_DIR"
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ docker-compose
        if [ -f "docker-compose.yml" ] && command -v docker-compose &> /dev/null; then
            log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–µ—Ä–µ–∑ docker-compose..."
            docker-compose down --volumes --remove-orphans || true
        fi
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
        if command -v docker &> /dev/null; then
            log "–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ BooksMood..."
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
            docker ps -a --filter "name=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker stop || true
            docker ps -a --filter "name=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker rm -f || true
            
            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –ø–æ label (–µ—Å–ª–∏ –µ—Å—Ç—å)
            docker ps -a --filter "label=project=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker stop || true
            docker ps -a --filter "label=project=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker rm -f || true
            
            log "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏ —É–¥–∞–ª–µ–Ω—ã"
        fi
    else
        warn "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: $PROJECT_DIR"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ Docker
remove_images() {
    if command -v docker &> /dev/null; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ Docker..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø–æ –∏–º–µ–Ω–∏ –ø—Ä–æ–µ–∫—Ç–∞
        docker images --filter "reference=${PROJECT_NAME}*" --format "{{.ID}}" | xargs -r docker rmi -f || true
        docker images --filter "reference=*${PROJECT_NAME}*" --format "{{.ID}}" | xargs -r docker rmi -f || true
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –æ–±—Ä–∞–∑–æ–≤ –ø–æ label
        docker images --filter "label=project=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker rmi -f || true
        
        log "–û–±—Ä–∞–∑—ã Docker —É–¥–∞–ª–µ–Ω—ã"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ volumes
remove_volumes() {
    if command -v docker &> /dev/null; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ Docker volumes..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã—Ö volumes –ø—Ä–æ–µ–∫—Ç–∞
        docker volume ls --filter "name=${PROJECT_NAME}" --format "{{.Name}}" | xargs -r docker volume rm -f || true
        docker volume ls --filter "label=project=${PROJECT_NAME}" --format "{{.Name}}" | xargs -r docker volume rm -f || true
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö volumes
        docker volume prune -f || true
        
        log "Docker volumes —É–¥–∞–ª–µ–Ω—ã"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π Docker
remove_networks() {
    if command -v docker &> /dev/null; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ Docker —Å–µ—Ç–µ–π..."
        
        # –£–¥–∞–ª–µ–Ω–∏–µ —Å–µ—Ç–µ–π –ø—Ä–æ–µ–∫—Ç–∞
        docker network ls --filter "name=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker network rm || true
        docker network ls --filter "label=project=${PROJECT_NAME}" --format "{{.ID}}" | xargs -r docker network rm || true
        
        # –û—á–∏—Å—Ç–∫–∞ –Ω–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö —Å–µ—Ç–µ–π
        docker network prune -f || true
        
        log "Docker —Å–µ—Ç–∏ —É–¥–∞–ª–µ–Ω—ã"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞
remove_project_files() {
    if [ -d "$PROJECT_DIR" ]; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞: $PROJECT_DIR"
        
        # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ .env (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        if [ -f "$PROJECT_DIR/.env" ]; then
            warn "–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏ .env..."
            cp "$PROJECT_DIR/.env" "/tmp/${PROJECT_NAME}-env-backup-$(date +%Y%m%d-%H%M%S)" || true
        fi
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
        rm -rf "$PROJECT_DIR"
        log "–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞ —É–¥–∞–ª–µ–Ω—ã"
    else
        log "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
    fi
}

# –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã
remove_system_user() {
    if id "$PROJECT_NAME" &>/dev/null; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–∏—Å—Ç–µ–º—ã: $PROJECT_NAME"
        
        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        pkill -u "$PROJECT_NAME" || true
        sleep 2
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        userdel "$PROJECT_NAME" || true
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç PROJECT_DIR)
        USER_HOME=$(eval echo "~$PROJECT_NAME" 2>/dev/null) || USER_HOME=""
        if [ -n "$USER_HOME" ] && [ "$USER_HOME" != "$PROJECT_DIR" ] && [ -d "$USER_HOME" ]; then
            rm -rf "$USER_HOME" || true
        fi
        
        log "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã —É–¥–∞–ª–µ–Ω"
    else
        log "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞
cleanup_firewall() {
    log "–û—á–∏—Å—Ç–∫–∞ –ø—Ä–∞–≤–∏–ª —Ñ–∞–π—Ä–≤–æ–ª–∞..."
    
    if command -v ufw &> /dev/null; then
        # Ubuntu/Debian UFW
        ufw delete allow 3000/tcp || true
        ufw delete allow 3001/tcp || true
        ufw delete allow 3002/tcp || true
        ufw delete allow 9001/tcp || true
        log "UFW –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã"
    elif command -v firewall-cmd &> /dev/null; then
        # CentOS/RHEL firewalld
        firewall-cmd --permanent --remove-port=3000/tcp || true
        firewall-cmd --permanent --remove-port=3001/tcp || true
        firewall-cmd --permanent --remove-port=3002/tcp || true
        firewall-cmd --permanent --remove-port=9001/tcp || true
        firewall-cmd --reload || true
        log "Firewalld –ø—Ä–∞–≤–∏–ª–∞ —É–¥–∞–ª–µ–Ω—ã"
    else
        warn "–§–∞–π—Ä–≤–æ–ª –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–∞–≤–∏–ª–∞ –Ω–µ –æ—á–∏—â–µ–Ω—ã"
    fi
}

# –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤
cleanup_logs() {
    log "–û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤..."
    
    # –û—á–∏—Å—Ç–∫–∞ –∂—É—Ä–Ω–∞–ª–∞ systemd
    journalctl --vacuum-time=1d || true
    
    # –û—á–∏—Å—Ç–∫–∞ –ª–æ–≥–æ–≤ Docker
    if command -v docker &> /dev/null; then
        docker system prune -a -f --volumes || true
    fi
    
    log "–õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
}

# –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ Docker
remove_docker() {
    if [[ "${REMOVE_DOCKER:-}" == "true" ]]; then
        log "–£–¥–∞–ª–µ–Ω–∏–µ Docker..."
        
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
        systemctl stop docker || true
        systemctl disable docker || true
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –û–° –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        if [ -f /etc/os-release ]; then
            . /etc/os-release
            OS=$ID
        fi
        
        case $OS in
            ubuntu|debian)
                apt-get remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || true
                apt-get autoremove -y || true
                ;;
            centos|rhel|rocky|almalinux)
                yum remove -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin || true
                ;;
        esac
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
        rm -rf /var/lib/docker
        rm -rf /var/lib/containerd
        rm -rf /etc/docker
        rm -rf ~/.docker
        
        # –£–¥–∞–ª–µ–Ω–∏–µ docker-compose
        rm -f /usr/local/bin/docker-compose
        rm -f /usr/bin/docker-compose
        
        log "Docker –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω"
    else
        log "Docker –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ (–¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ --remove-docker)"
    fi
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–ª–µ–¥–æ–≤
check_cleanup() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—Å—Ç–∫–∏..."
    
    echo ""
    echo -e "${BLUE}üìã –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ—á–∏—Å—Ç–∫–∏:${NC}"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
    if command -v docker &> /dev/null; then
        CONTAINERS=$(docker ps -a --filter "name=${PROJECT_NAME}" --format "{{.Names}}" | wc -l)
        if [ "$CONTAINERS" -eq 0 ]; then
            echo -e "   ‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: —É–¥–∞–ª–µ–Ω—ã"
        else
            echo -e "   ‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã: –Ω–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è ($CONTAINERS)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤
        IMAGES=$(docker images --filter "reference=*${PROJECT_NAME}*" --format "{{.Repository}}" | wc -l)
        if [ "$IMAGES" -eq 0 ]; then
            echo -e "   ‚úÖ –û–±—Ä–∞–∑—ã: —É–¥–∞–ª–µ–Ω—ã"
        else
            echo -e "   ‚ùå –û–±—Ä–∞–∑—ã: –Ω–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è ($IMAGES)"
        fi
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ volumes
        VOLUMES=$(docker volume ls --filter "name=${PROJECT_NAME}" --format "{{.Name}}" | wc -l)
        if [ "$VOLUMES" -eq 0 ]; then
            echo -e "   ‚úÖ Volumes: —É–¥–∞–ª–µ–Ω—ã"
        else
            echo -e "   ‚ùå Volumes: –Ω–∞–π–¥–µ–Ω—ã –æ—Å—Ç–∞–≤—à–∏–µ—Å—è ($VOLUMES)"
        fi
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤
    if [ -d "$PROJECT_DIR" ]; then
        echo -e "   ‚ùå –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $PROJECT_DIR –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "   ‚úÖ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞: —É–¥–∞–ª–µ–Ω—ã"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if id "$PROJECT_NAME" &>/dev/null; then
        echo -e "   ‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: $PROJECT_NAME –≤—Å—ë –µ—â—ë —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    else
        echo -e "   ‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: —É–¥–∞–ª–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ª—É–∂–±—ã
    if systemctl is-enabled "$SERVICE_NAME.service" &>/dev/null; then
        echo -e "   ‚ùå –°–ª—É–∂–±–∞: $SERVICE_NAME –≤—Å—ë –µ—â—ë –∞–∫—Ç–∏–≤–Ω–∞"
    else
        echo -e "   ‚úÖ –°–ª—É–∂–±–∞: —É–¥–∞–ª–µ–Ω–∞"
    fi
    
    echo ""
}

# –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
show_final_info() {
    echo ""
    echo -e "${PURPLE}üéâ –û—á–∏—Å—Ç–∫–∞ BooksMood –∑–∞–≤–µ—Ä—à–µ–Ω–∞!${NC}"
    echo -e "${PURPLE}===============================${NC}"
    echo ""
    
    if [ -f "/tmp/${PROJECT_NAME}-env-backup-"* ] 2>/dev/null; then
        echo -e "${GREEN}üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è .env —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ /tmp/${NC}"
        ls -la /tmp/${PROJECT_NAME}-env-backup-* 2>/dev/null || true
        echo ""
    fi
    
    echo -e "${GREEN}‚úÖ –£—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ:${NC}"
    echo "   ‚Ä¢ –í—Å–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∏ –æ–±—Ä–∞–∑—ã Docker"
    echo "   ‚Ä¢ –í—Å–µ –¥–∞–Ω–Ω—ã–µ –∏ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞"
    echo "   ‚Ä¢ Systemd —Å–ª—É–∂–±–∞"
    echo "   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–∏—Å—Ç–µ–º—ã"
    echo "   ‚Ä¢ –ü—Ä–∞–≤–∏–ª–∞ —Ñ–∞–π—Ä–≤–æ–ª–∞"
    echo ""
    
    if [[ "${REMOVE_DOCKER:-}" != "true" ]]; then
        echo -e "${YELLOW}‚ÑπÔ∏è  Docker –æ—Å—Ç–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ${NC}"
        echo "   –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–ø—É—Å—Ç–∏—Ç–µ:"
        echo "   bash uninstall.sh --remove-docker"
        echo ""
    fi
    
    echo -e "${GREEN}üîÑ –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:${NC}"
    echo "   bash install.sh"
    echo ""
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    log "–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ BooksMood..."
    
    check_sudo "$@"
    confirm_removal
    stop_systemd_service
    stop_containers
    remove_images
    remove_volumes
    remove_networks
    remove_project_files
    remove_system_user
    cleanup_firewall
    cleanup_logs
    remove_docker
    check_cleanup
    show_final_info
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
while [[ $# -gt 0 ]]; do
    case $1 in
        --force)
            FORCE=true
            shift
            ;;
        --remove-docker)
            REMOVE_DOCKER=true
            shift
            ;;
        --help|-h)
            echo "BooksMood - –°–∫—Ä–∏–ø—Ç –æ—á–∏—Å—Ç–∫–∏"
            echo ""
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:"
            echo "  bash uninstall.sh                # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞"
            echo "  bash uninstall.sh --force        # –ë–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            echo "  bash uninstall.sh --remove-docker # –° —É–¥–∞–ª–µ–Ω–∏–µ–º Docker"
            echo "  bash uninstall.sh --help         # –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞"
            echo ""
            echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
            echo "  --force         –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"
            echo "  --remove-docker –£–¥–∞–ª–∏—Ç—å Docker –∏–∑ —Å–∏—Å—Ç–µ–º—ã"
            echo ""
            exit 0
            ;;
        *)
            error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"
            exit 1
            ;;
    esac
done

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main 