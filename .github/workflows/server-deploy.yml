name: BooksMood Server Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'production'
        type: choice
        options:
        - production
        - staging

jobs:
  deploy:
    name: Deploy to Server
    runs-on: ubuntu-latest
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup SSH Agent
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SERVER_SSH_KEY }}

    - name: Add server to known hosts
      run: |
        ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

    - name: Deploy to server
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
        POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
        REDIS_PASSWORD: ${{ secrets.REDIS_PASSWORD }}
        JWT_SECRET: ${{ secrets.JWT_SECRET }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        TELEGRAM_BOT_USERNAME: ${{ secrets.TELEGRAM_BOT_USERNAME }}
        S3_ACCESS_KEY: ${{ secrets.S3_ACCESS_KEY }}
        S3_SECRET_KEY: ${{ secrets.S3_SECRET_KEY }}
      run: |
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
        ssh $SERVER_USER@$SERVER_HOST << 'EOF'
          set -e
          
          # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
          DEPLOY_DIR="/opt/booksmood"
          REPO_URL="git@github.com:Cossomoj/booksmood.git"
          
          echo "üöÄ Starting deployment..."
          
          # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
          sudo mkdir -p $DEPLOY_DIR
          sudo chown $USER:$USER $DEPLOY_DIR
          
          # –ö–ª–æ–Ω–∏—Ä—É–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
          if [ -d "$DEPLOY_DIR/.git" ]; then
            echo "üì¶ Updating repository..."
            cd $DEPLOY_DIR
            git fetch origin
            git reset --hard origin/main
            git pull origin main
          else
            echo "üì• Cloning repository..."
            git clone $REPO_URL $DEPLOY_DIR
            cd $DEPLOY_DIR
          fi
          
          # –°–æ–∑–¥–∞–µ–º production .env —Ñ–∞–π–ª
          cat > .env.prod << EOL
        NODE_ENV=production
        POSTGRES_DB=booksmood
        POSTGRES_USER=booksmood
        POSTGRES_PASSWORD=$POSTGRES_PASSWORD
        DATABASE_URL=postgresql://booksmood:$POSTGRES_PASSWORD@postgres:5432/booksmood
        REDIS_PASSWORD=$REDIS_PASSWORD
        REDIS_URL=redis://:$REDIS_PASSWORD@redis:6379
        JWT_SECRET=$JWT_SECRET
        TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
        TELEGRAM_BOT_USERNAME=$TELEGRAM_BOT_USERNAME
        S3_ACCESS_KEY=$S3_ACCESS_KEY
        S3_SECRET_KEY=$S3_SECRET_KEY
        S3_ENDPOINT=http://minio:9000
        S3_BUCKET=booksmood-audio
        S3_REGION=us-east-1
        FRONTEND_API_URL=http://$SERVER_HOST:3001
        ADMIN_API_URL=http://$SERVER_HOST:3001
        CORS_ORIGIN=http://$SERVER_HOST:3000
        RATE_LIMIT_WINDOW=3600000
        RATE_LIMIT_MAX=1000
        LOG_LEVEL=warn
        EOL
          
          # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          docker-compose -f docker-compose.prod.yml down || true
          
          # –°–æ–±–∏—Ä–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
          docker-compose -f docker-compose.prod.yml build --no-cache
          docker-compose -f docker-compose.prod.yml up -d
          
          # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
          echo "‚è≥ Waiting for database..."
          sleep 15
          
          # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏
          docker-compose -f docker-compose.prod.yml exec -T backend npx prisma migrate deploy || echo "Migration failed, but continuing..."
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
          echo "üìä Deployment status:"
          docker-compose -f docker-compose.prod.yml ps
          
          echo "üéâ Deployment completed!"
          echo "Frontend: http://$SERVER_HOST:3000"
          echo "Admin: http://$SERVER_HOST:3002"
          echo "API: http://$SERVER_HOST:3001"
        EOF

    - name: Verify deployment
      env:
        SERVER_USER: ${{ secrets.SERVER_USER }}
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ API –æ—Ç–≤–µ—á–∞–µ—Ç
        sleep 10
        if ssh $SERVER_USER@$SERVER_HOST "curl -f http://localhost:3001/health"; then
          echo "‚úÖ API is healthy"
        else
          echo "‚ùå API health check failed"
          exit 1
        fi

    - name: Notification
      if: always()
      env:
        SERVER_HOST: ${{ secrets.SERVER_HOST }}
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "üéâ Deployment to $SERVER_HOST completed successfully!"
          echo "URLs:"
          echo "  Frontend: http://$SERVER_HOST:3000"
          echo "  Admin Panel: http://$SERVER_HOST:3002"
          echo "  Backend API: http://$SERVER_HOST:3001"
        else
          echo "‚ùå Deployment to $SERVER_HOST failed!"
        fi 